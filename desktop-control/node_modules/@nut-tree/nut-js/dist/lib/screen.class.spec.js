"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("process");
const vision_adapter_class_1 = require("./adapter/vision.adapter.class");
const image_class_1 = require("./image.class");
const locationparameters_class_1 = require("./locationparameters.class");
const match_request_class_1 = require("./match-request.class");
const match_result_class_1 = require("./match-result.class");
const region_class_1 = require("./region.class");
const screen_class_1 = require("./screen.class");
jest.mock("./adapter/native.adapter.class");
jest.mock("./adapter/vision.adapter.class");
const searchRegion = new region_class_1.Region(0, 0, 100, 100);
beforeAll(() => {
    vision_adapter_class_1.VisionAdapter.prototype.grabScreen = jest.fn(() => {
        return Promise.resolve(new image_class_1.Image(searchRegion.width, searchRegion.height, new ArrayBuffer(0), 3));
    });
    vision_adapter_class_1.VisionAdapter.prototype.screenSize = jest.fn(() => {
        return Promise.resolve(searchRegion);
    });
});
describe("Screen.", () => {
    it("should resolve with sufficient confidence.", async () => {
        const matchResult = new match_result_class_1.MatchResult(0.99, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        await expect(SUT.find(imagePath)).resolves.toEqual(matchResult.location);
        const matchRequest = new match_request_class_1.MatchRequest(expect.any(image_class_1.Image), path_1.join(process_1.cwd(), imagePath), searchRegion, SUT.config.confidence, true);
        expect(visionAdapterMock.findOnScreenRegion).toHaveBeenCalledWith(matchRequest);
    });
    it("should call registered hook before resolve", async () => {
        const matchResult = new match_result_class_1.MatchResult(0.99, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const testCallback = jest.fn(() => Promise.resolve());
        const imagePath = "test/path/to/image.png";
        SUT.on(imagePath, testCallback);
        await SUT.find(imagePath);
        expect(testCallback).toBeCalledTimes(1);
        expect(testCallback).toBeCalledWith(matchResult);
    });
    it("should call multiple registered hooks before resolve", async () => {
        const matchResult = new match_result_class_1.MatchResult(0.99, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const testCallback = jest.fn(() => Promise.resolve());
        const secondCallback = jest.fn(() => Promise.resolve());
        const imagePath = "test/path/to/image.png";
        SUT.on(imagePath, testCallback);
        SUT.on(imagePath, secondCallback);
        await SUT.find(imagePath);
        for (const callback of [testCallback, secondCallback]) {
            expect(callback).toBeCalledTimes(1);
            expect(callback).toBeCalledWith(matchResult);
        }
    });
    it("should reject with insufficient confidence.", async () => {
        const matchResult = new match_result_class_1.MatchResult(0.8, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        await expect(SUT.find(imagePath))
            .rejects
            .toEqual(`No match for ${imagePath}. Required: ${SUT.config.confidence}, given: ${matchResult.confidence}`);
    });
    it("should reject when search fails.", async () => {
        const rejectionReason = "Search failed.";
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.reject(rejectionReason);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        await expect(SUT.find(imagePath))
            .rejects
            .toEqual(`Searching for ${imagePath} failed. Reason: '${rejectionReason}'`);
    });
    it("should override default confidence value with parameter.", async () => {
        const minMatch = 0.8;
        const matchResult = new match_result_class_1.MatchResult(minMatch, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        const parameters = new locationparameters_class_1.LocationParameters(undefined, minMatch);
        await expect(SUT.find(imagePath, parameters)).resolves.toEqual(matchResult.location);
        const matchRequest = new match_request_class_1.MatchRequest(expect.any(image_class_1.Image), path_1.join(process_1.cwd(), imagePath), searchRegion, minMatch, true);
        expect(visionAdapterMock.findOnScreenRegion).toHaveBeenCalledWith(matchRequest);
    });
    it("should override default search region with parameter.", async () => {
        // GIVEN
        const customSearchRegion = new region_class_1.Region(10, 10, 90, 90);
        const matchResult = new match_result_class_1.MatchResult(0.99, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        const parameters = new locationparameters_class_1.LocationParameters(customSearchRegion);
        const expectedMatchRequest = new match_request_class_1.MatchRequest(expect.any(image_class_1.Image), path_1.join(process_1.cwd(), imagePath), customSearchRegion, SUT.config.confidence, true);
        // WHEN
        await SUT.find(imagePath, parameters);
        // THEN
        expect(visionAdapterMock.findOnScreenRegion).toHaveBeenCalledWith(expectedMatchRequest);
    });
    it("should override both confidence and search region with parameter.", async () => {
        // GIVEN
        const minMatch = 0.8;
        const customSearchRegion = new region_class_1.Region(10, 10, 90, 90);
        const matchResult = new match_result_class_1.MatchResult(minMatch, searchRegion);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        const imagePath = "test/path/to/image.png";
        const parameters = new locationparameters_class_1.LocationParameters(customSearchRegion, minMatch);
        const expectedMatchRequest = new match_request_class_1.MatchRequest(expect.any(image_class_1.Image), path_1.join(process_1.cwd(), imagePath), customSearchRegion, minMatch, true);
        // WHEN
        await SUT.find(imagePath, parameters);
        // THEN
        expect(visionAdapterMock.findOnScreenRegion).toHaveBeenCalledWith(expectedMatchRequest);
    });
    it("should return region to highlight for chaining", async () => {
        // GIVEN
        const highlightRegion = new region_class_1.Region(10, 20, 30, 40);
        vision_adapter_class_1.VisionAdapter.prototype.highlightScreenRegion = jest.fn();
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        // WHEN
        const result = await SUT.highlight(highlightRegion);
        // THEN
        expect(result).toEqual(highlightRegion);
    });
    it("should handle Promises and return region to highlight for chaining", async () => {
        // GIVEN
        const highlightRegion = new region_class_1.Region(10, 20, 30, 40);
        const highlightRegionPromise = new Promise(res => res(highlightRegion));
        vision_adapter_class_1.VisionAdapter.prototype.highlightScreenRegion = jest.fn();
        const visionAdapterMock = new vision_adapter_class_1.VisionAdapter();
        const SUT = new screen_class_1.Screen(visionAdapterMock);
        // WHEN
        const result = await SUT.highlight(highlightRegionPromise);
        // THEN
        expect(result).toEqual(highlightRegion);
    });
    it("should add search region offset to result image location", async () => {
        // GIVEN
        const limitedSearchRegion = new region_class_1.Region(100, 200, 300, 400);
        const resultRegion = new region_class_1.Region(50, 100, 150, 200);
        const matchResult = new match_result_class_1.MatchResult(0.99, resultRegion);
        const expectedMatchRegion = new region_class_1.Region(limitedSearchRegion.left + resultRegion.left, limitedSearchRegion.top + resultRegion.top, resultRegion.width, resultRegion.height);
        vision_adapter_class_1.VisionAdapter.prototype.findOnScreenRegion = jest.fn(() => {
            return Promise.resolve(matchResult);
        });
        const SUT = new screen_class_1.Screen(new vision_adapter_class_1.VisionAdapter());
        // WHEN
        const matchRegion = await SUT.find("test/path/to/image.png", {
            searchRegion: limitedSearchRegion
        });
        // THEN
        expect(matchRegion).toEqual(expectedMatchRegion);
    });
});
//# sourceMappingURL=screen.class.spec.js.map